# This makefile was generated by C/C++ Project Generator Extension made by danielpinto8zz6
# It was only modified by me (Patryk Pochmara) to suit my personal needs

# define the C++ compiler to use
CXX := g++

# define any compile-time flags
CFLAGS	:= -std=c++17 -Wall -Wextra -Wpedantic
DEBUG_CFLAGS	:= -D_DEBUG -g -Og
RELEASE_CFLAGS	:= -O2

# define any link-time flags
LFLAGS	:= 
DEBUG_LFLAGS	:= 
RELEASE_LFLAGS	:=

# define library paths other than SFML
LPATHS	:=

# define linking mode
LMODE	?= dynamic

# define SFML stuff
SFML_INCLUDE	:= "C:/External_libraries/CPP/SFML-2.5.1-source/include"
EXT_LIB	:= "C:/External_libraries/CPP/SFML-2.5.1-source/extlibs/libs-mingw/x64"
EXT_LPATHS	:= -lFLAC -lfreetype -lopenal32 -lvorbisenc -lvorbisfile -lvorbis -logg -lopengl32 -lgdi32 -lwinmm -lws2_32
ifeq ($(LMODE),static)
$(warning ---------------------------------- WARNING! ----------------------------------)
$(warning If linker errors appear when static linking, 'make clean' first and then retry)
$(warning ---------------------------------- WARNING! ----------------------------------)
SFML_LIB	:= "C:/External_libraries/CPP/SFML-2.5.1-Mingw64-gcc11.2.0-llvm-msvcrt-static/lib"
CFLAGS	+= -DSFML_STATIC
LFLAGS	+= -static-libgcc -static-libstdc++
DEBUG_LPATHS	:= -lsfml-network-s-d -lsfml-audio-s-d -lsfml-graphics-s-d -lsfml-window-s-d -lsfml-system-s-d
RELEASE_LPATHS	:= -lsfml-network-s -lsfml-audio-s -lsfml-graphics-s -lsfml-window-s -lsfml-system-s
else
ifeq ($(LMODE),dynamic)
SFML_LIB	:= "C:/External_libraries/CPP/SFML-2.5.1-Mingw64-gcc11.2.0-llvm-msvcrt-dynamic/lib"
DEBUG_LPATHS	:= -lsfml-network-d -lsfml-audio-d -lsfml-graphics-d -lsfml-window-d -lsfml-system-d
RELEASE_LPATHS	:= -lsfml-network -lsfml-audio -lsfml-graphics -lsfml-window -lsfml-system
else
$(error Incorrect linking mode - it must be either 'static' or 'dynamic')
endif
endif

# define output directory
DEBUG_OUTPUT	:= debug
RELEASE_OUTPUT	:= release
OBJECTS_SUBDIR	:= objects

# define source directory
SRC		:= src

# define include directory
INCLUDE	:= include $(SFML_INCLUDE)

# define lib directory
LIB		:= lib $(SFML_LIB) $(EXT_LIB)

# OS specific setup
ifeq ($(OS),Windows_NT)
MAIN	:= main.exe
SOURCEDIRS	:= $(SRC)
INCLUDEDIRS	:= $(INCLUDE)
LIBDIRS		:= $(LIB)
FIXPATH = $(subst /,\,$1)
RM	:= del /q /f
RM_ERR_SILENCER	:= 2>NUL
MD	:= mkdir
else
MAIN	:= main
SOURCEDIRS	:= $(shell find $(SRC) -type d)
INCLUDEDIRS	:= $(shell find $(INCLUDE) -type d)
LIBDIRS		:= $(shell find $(LIB) -type d)
FIXPATH = $1
RM	:= rm -f
RM_ERR_SILENCER	:=
MD	:= mkdir -p
endif

# define any directories containing header files
INCLUDES	:= $(patsubst %,-I%, $(INCLUDEDIRS:%/=%))

# define the libs
LIBS	:= $(patsubst %,-L%, $(LIBDIRS:%/=%))

# define the source files
SOURCES	:= $(wildcard $(patsubst %,%/*.cpp, $(SOURCEDIRS)))

# define the object files
DEBUG_OBJECTS	:= $(patsubst $(SRC)%,$(DEBUG_OUTPUT)/$(OBJECTS_SUBDIR)%, $(SOURCES:.cpp=.o))
RELEASE_OBJECTS	:= $(patsubst $(SRC)%,$(RELEASE_OUTPUT)/$(OBJECTS_SUBDIR)%, $(SOURCES:.cpp=.o))

#
# The following part of the makefile is generic; it can be used to 
# build any executable just by changing the definitions above
#

.PHONY: debug release clean cleanup

debug: CFLAGS += $(DEBUG_CFLAGS)
debug: LFLAGS += $(DEBUG_LFLAGS)
debug: LPATHS += $(DEBUG_LPATHS) $(EXT_LPATHS)
debug: $(DEBUG_OBJECTS)
	@echo Linking $(MAIN)...
	@$(CXX) $(CFLAGS) $(INCLUDES) -o $(DEBUG_OUTPUT)/$(MAIN) $(DEBUG_OBJECTS) $(LFLAGS) $(LPATHS) $(LIBS)
	@echo Debug build sucessful!

release: CFLAGS += $(RELEASE_CFLAGS)
release: LFLAGS += $(RELEASE_LFLAGS)
release: LPATHS += $(RELEASE_LPATHS) $(EXT_LPATHS)
release: $(RELEASE_OBJECTS)
	@echo Linking $(MAIN)...
	@$(CXX) $(CFLAGS) $(INCLUDES) -o $(RELEASE_OUTPUT)/$(MAIN) $(RELEASE_OBJECTS) $(LFLAGS) $(LPATHS) $(LIBS)
	@echo Release build sucessful!

$(DEBUG_OUTPUT)/$(OBJECTS_SUBDIR)/%.o : $(SRC)/%.cpp
	@echo Compiling $(<F)...
	@$(CXX) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(RELEASE_OUTPUT)/$(OBJECTS_SUBDIR)/%.o : $(SRC)/%.cpp
	@echo Compiling $(<F)...
	@$(CXX) $(CFLAGS) $(INCLUDES) -c $< -o $@

clean: cleanup
	@echo Deleting executables...
	@$(RM) $(call FIXPATH,$(DEBUG_OUTPUT)/$(MAIN)) $(call FIXPATH,$(RELEASE_OUTPUT)/$(MAIN)) $(RM_ERR_SILENCER)
	@echo Executables deleted.

cleanup:
	@echo Deleting object files...
	@$(RM) $(call FIXPATH,$(DEBUG_OBJECTS)) $(call FIXPATH,$(RELEASE_OBJECTS)) $(RM_ERR_SILENCER)
	@echo Object files deleted.
